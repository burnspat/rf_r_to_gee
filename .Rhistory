options(scipen=999) # Ensure numbers are not represented in scientific notation
# Parameters
model_generation_method = 'fit' # Choose 'fit' to fit an example model, choose 'load' to load existing model
model_type = 'ranger' # Specify R package used to create model - 'randomForest' or 'ranger'
response_type = 'classification' # Choose 'classification' or 'probability' or 'regression'
# 'load' parameters
in_path = '' # Path for loading existing model, if needed
# FIT OR LOAD MODEL ====================================================================================================
# Use example models, or load existing model
if(model_generation_method == 'fit'){
# Get example dataset
data = mtcars
# Fit model
if(model_type == 'ranger'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else if(response_type == 'probability'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100, probability = TRUE)
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else if(model_type == 'randomForest'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else if(response_type == 'probability'){
stop('Probability models not available for randomForest, either change model type to "ranger", or change response type')
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else{
stop('Model type not recognized, please choose "ranger" or "randomForest"')
}
}else if(model_generation_method == 'load'){
rf = readRDS(in_path)
}
# CONVERT FOREST ====================================================================================================
# Prep model
rf = prep.mod(rf, model_type, response_type)
# Convert forest
convert.forest(rf, paste0('TEST_', model_type, '_', response_type, '.txt'))
# TO-DO:
# For predictions at splits (NOT leaves) do we want the predict value including NAs (my code) or -1 (Pat's code?)
# Untested for categorical predictors - it seems to produce the right tree output, but I have not tried reading the trees into GEE
# CHECKS:
# X ranger - regression - no categorical predictors
# X ranger - probability - no categorical predictors
# X ranger - classification - no categorical predictors
# X ranger - regression - categorical predictors
# X ranger - probability - categorical predictors
# X ranger - classification - categorical predictors
# X randomForest - regression - no categorical predictors
# X randomForest - classification - no categorical predictors
# X randomForest - regression -  categorical predictors
# X randomForest - classification -  categorical predictors
# SCRIPT METADATA ==========================================================================================
# Description: R script to format a random forest model fit in 'ranger' or 'randomForest' for upload to Google Earth Engine
# Script Author: Kathleen Orndahl & Patrick Burns
# Script Date: 2024-08-30
# NOTES:
# Code has not been robustly tested on all use cases and may require some troubleshooting depending on the parameters used in creating the models
# The script can correctly encode categorical variables, but note that categorical variables are not supported by GEE models
# If fitting models using tidymodels, extract the 'engine' model before using this script, e.g.
#   engine_mod = parsnip_mod %>% extract_fit_engine() OR
#   engine_mod = parsnip_mod$fit
# SET UP ====================================================================================================
# Libraries
library(dplyr)
library(tidyr)
library(ranger)
library(randomForest)
# library(reprtree)
source('code/reprtree_update.R')
options(scipen=999) # Ensure numbers are not represented in scientific notation
# Parameters
model_generation_method = 'fit' # Choose 'fit' to fit an example model, choose 'load' to load existing model
model_type = 'ranger' # Specify R package used to create model - 'randomForest' or 'ranger'
response_type = 'probability' # Choose 'classification' or 'probability' or 'regression'
# 'load' parameters
in_path = '' # Path for loading existing model, if needed
# FIT OR LOAD MODEL ====================================================================================================
# Use example models, or load existing model
if(model_generation_method == 'fit'){
# Get example dataset
data = mtcars
# Fit model
if(model_type == 'ranger'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else if(response_type == 'probability'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100, probability = TRUE)
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else if(model_type == 'randomForest'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else if(response_type == 'probability'){
stop('Probability models not available for randomForest, either change model type to "ranger", or change response type')
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else{
stop('Model type not recognized, please choose "ranger" or "randomForest"')
}
}else if(model_generation_method == 'load'){
rf = readRDS(in_path)
}
# CONVERT FOREST ====================================================================================================
# Prep model
rf = prep.mod(rf, model_type, response_type)
# Convert forest
convert.forest(rf, paste0('TEST_', model_type, '_', response_type, '.txt'))
# TO-DO:
# For predictions at splits (NOT leaves) do we want the predict value including NAs (my code) or -1 (Pat's code?)
# Untested for categorical predictors - it seems to produce the right tree output, but I have not tried reading the trees into GEE
# CHECKS:
# X ranger - regression - no categorical predictors
# X ranger - probability - no categorical predictors
# X ranger - classification - no categorical predictors
# X ranger - regression - categorical predictors
# X ranger - probability - categorical predictors
# X ranger - classification - categorical predictors
# X randomForest - regression - no categorical predictors
# X randomForest - classification - no categorical predictors
# X randomForest - regression -  categorical predictors
# X randomForest - classification -  categorical predictors
# SCRIPT METADATA ==========================================================================================
# Description: R script to format a random forest model fit in 'ranger' or 'randomForest' for upload to Google Earth Engine
# Script Author: Kathleen Orndahl & Patrick Burns
# Script Date: 2024-08-30
# NOTES:
# Code has not been robustly tested on all use cases and may require some troubleshooting depending on the parameters used in creating the models
# The script can correctly encode categorical variables, but note that categorical variables are not supported by GEE models
# If fitting models using tidymodels, extract the 'engine' model before using this script, e.g.
#   engine_mod = parsnip_mod %>% extract_fit_engine() OR
#   engine_mod = parsnip_mod$fit
# SET UP ====================================================================================================
# Libraries
library(dplyr)
library(tidyr)
library(ranger)
library(randomForest)
# library(reprtree)
source('code/reprtree_update.R')
options(scipen=999) # Ensure numbers are not represented in scientific notation
# Parameters
model_generation_method = 'fit' # Choose 'fit' to fit an example model, choose 'load' to load existing model
model_type = 'randomForest' # Specify R package used to create model - 'randomForest' or 'ranger'
response_type = 'classification' # Choose 'classification' or 'probability' or 'regression'
# 'load' parameters
in_path = '' # Path for loading existing model, if needed
# FIT OR LOAD MODEL ====================================================================================================
# Use example models, or load existing model
if(model_generation_method == 'fit'){
# Get example dataset
data = mtcars
# Fit model
if(model_type == 'ranger'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else if(response_type == 'probability'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100, probability = TRUE)
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else if(model_type == 'randomForest'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else if(response_type == 'probability'){
stop('Probability models not available for randomForest, either change model type to "ranger", or change response type')
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else{
stop('Model type not recognized, please choose "ranger" or "randomForest"')
}
}else if(model_generation_method == 'load'){
rf = readRDS(in_path)
}
# CONVERT FOREST ====================================================================================================
# Prep model
rf = prep.mod(rf, model_type, response_type)
# Convert forest
convert.forest(rf, paste0('TEST_', model_type, '_', response_type, '.txt'))
# TO-DO:
# For predictions at splits (NOT leaves) do we want the predict value including NAs (my code) or -1 (Pat's code?)
# Untested for categorical predictors - it seems to produce the right tree output, but I have not tried reading the trees into GEE
# CHECKS:
# X ranger - regression - no categorical predictors
# X ranger - probability - no categorical predictors
# X ranger - classification - no categorical predictors
# X ranger - regression - categorical predictors
# X ranger - probability - categorical predictors
# X ranger - classification - categorical predictors
# X randomForest - regression - no categorical predictors
# X randomForest - classification - no categorical predictors
# X randomForest - regression -  categorical predictors
# X randomForest - classification -  categorical predictors
# SCRIPT METADATA ==========================================================================================
# Description: R script to format a random forest model fit in 'ranger' or 'randomForest' for upload to Google Earth Engine
# Script Author: Kathleen Orndahl & Patrick Burns
# Script Date: 2024-08-30
# NOTES:
# Code has not been robustly tested on all use cases and may require some troubleshooting depending on the parameters used in creating the models
# The script can correctly encode categorical variables, but note that categorical variables are not supported by GEE models
# If fitting models using tidymodels, extract the 'engine' model before using this script, e.g.
#   engine_mod = parsnip_mod %>% extract_fit_engine() OR
#   engine_mod = parsnip_mod$fit
# SET UP ====================================================================================================
# Libraries
library(dplyr)
library(tidyr)
library(ranger)
library(randomForest)
# library(reprtree)
source('code/reprtree_update.R')
options(scipen=999) # Ensure numbers are not represented in scientific notation
# Parameters
model_generation_method = 'fit' # Choose 'fit' to fit an example model, choose 'load' to load existing model
model_type = 'randomForest' # Specify R package used to create model - 'randomForest' or 'ranger'
response_type = 'regression' # Choose 'classification' or 'probability' or 'regression'
# 'load' parameters
in_path = '' # Path for loading existing model, if needed
# FIT OR LOAD MODEL ====================================================================================================
# Use example models, or load existing model
if(model_generation_method == 'fit'){
# Get example dataset
data = mtcars
# Fit model
if(model_type == 'ranger'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else if(response_type == 'probability'){
data$am = as.factor(data$am)
response_var = 'am'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100, probability = TRUE)
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = ranger(as.formula(paste(response_var, '~.')), data = data, num.trees = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else if(model_type == 'randomForest'){
if(response_type == 'classification'){
data$am = as.factor(data$am)
response_var = 'am'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else if(response_type == 'probability'){
stop('Probability models not available for randomForest, either change model type to "ranger", or change response type')
}else if(response_type == 'regression'){
response_var = 'mpg'
rf = randomForest(as.formula(paste(response_var, '~.')), data = data, ntree = 100)
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
}else{
stop('Model type not recognized, please choose "ranger" or "randomForest"')
}
}else if(model_generation_method == 'load'){
rf = readRDS(in_path)
}
# CONVERT FOREST ====================================================================================================
# Prep model
rf = prep.mod(rf, model_type, response_type)
# Convert forest
convert.forest(rf, paste0('TEST_', model_type, '_', response_type, '.txt'))
rf <- rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger") %>%
fit(mpg ~ ., data = mtcars)
rf <- rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger") %>%
tidymodels::fit(mpg ~ ., data = mtcars)
library(tidymodels)
rf <- rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger") %>%
tidymodels::fit(mpg ~ ., data = mtcars)
rf <- rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger") %>%
fit(mpg ~ ., data = mtcars)
rf
rf = prep.mod(rf, model_type, response_type, caret = FALSE, tidymodels = FALSE)
rf
rf <- rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger") %>%
fit(mpg ~ ., data = mtcars)
rf = prep.mod(rf, model_type, response_type, caret = FALSE, tidymodels = TRUE)
rf
rf$model_type
rf <- rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger") %>%
fit(mpg ~ ., data = mtcars)
rf = prep.mod(rf, 'ranger', 'regression', caret = FALSE, tidymodels = TRUE)
rf$n_tree_var
rf$model_type
rf$pred_var
# Prep a random forest model for conversion
# Adds relevant metadata to model object
#
#' @param init_mod A random forest model fitted in R using either ranger or randomForest
#' @param model_type Name of function used to fit model - choose 'ranger' or 'randomForest'
#' @param response_type Random forest type - 'classification', 'regression' or 'probability'
#' @param caret Caret used to fit model?
#' @param tidymodels Tidymodels used to fit model?
prep.mod = function(init_mod, model_type, response_type, caret = FALSE, tidymodels = FALSE){
# Get base model from caret/tidymodels
if(caret) init_mod = init_mod$finalModel
if(tidymodels) init_mod = init_mod$fit
# Get model specific parameters
if(model_type == 'ranger'){
n_tree_var = 'num.trees'
response_var = init_mod$dependent.variable.name
if(response_type == 'classification'){
pred_var = 'prediction'
}else if(response_type == 'probability'){
pred_var = paste0('pred.', levels(data[, response_var])[1])
}else if(response_type == 'regression'){
pred_var = 'prediction'
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
init_mod$model_type = model_type
init_mod$response_type = response_type
init_mod$pred_var = pred_var
init_mod$n_tree_var = n_tree_var
}else if(model_type == 'randomForest'){
n_tree_var = 'ntree'
response_var = names(attributes(init_mod$terms)$dataClasses)[1]
if(response_type == 'classification'){
pred_var = 'prediction'
}else if(response_type == 'probability'){
stop('Probability models not available for randomForest, either change model type to "ranger", or change response type')
}else if(response_type == 'regression'){
pred_var = 'prediction'
}else{
stop('Response type not recognized, choose "classification" or "probability" or "regression"')
}
init_mod$model_type = model_type
init_mod$response_type = response_type
init_mod$pred_var = pred_var
init_mod$n_tree_var = n_tree_var
}else{
stop('Model type not recognized, please choose "ranger" or "randomForest"')
}
return(init_mod)
}
# Convert the result of a getTree call to a format compatible with tree
#
# This function takes the results of a \code{randomForest::getTree} call and
# converts the results to a form compatible with \code{tree}
#' @param gTree The results of a call to \code{getTree}
#' @param rforest The randomForest object
#' @param training_data The training data as a data.frame
#' @param response_type The type of model response, either 'classification' or 'probability' or 'regression'
# @return An object of class \code{tree}, which has a \code{frame} and sufficient
#     attributes to enable plotting
as.tree <- function(gTree,rforest){
# Populate data for from tree
if(is.numeric(gTree[,'split var'])) stop("labelVar=T required")
bl <- matrix("", nrow=nrow(gTree), ncol=3)
for(row in 1:nrow(gTree)){
if(row==1){
bl[row, 1:2] <- c('10','11')
next
}
if(gTree[row,"left daughter"]>0){
bl[row,1:2] <- paste0(bl[which(gTree[,c("left daughter","right daughter")]==row,arr.ind=T)], c('0','1'))
} else {
bl[row,3] <- bl[which(gTree[,c("left daughter","right daughter")]==row, arr.ind=T)]
}
}
bl <- data.frame(bl, stringsAsFactors=F); names(bl) <- c('left','right','terminal')
fr <- list()
fr$var <- as.character(gTree[,"split var"])
fr$var[is.na(fr$var)] <- '<leaf>'
fr$n <- fr$dev <- rep(0,length(fr$var)) # Deviation (splitStat) and n (numSamples) are not needed
fr$yval <- gTree[,'prediction']
# Tidy yval, NAs not read in GEE
if(rforest$response_type == 'classification'){
yval_tmp = as.character(fr$yval)
yval_tmp = ifelse(is.na(yval_tmp), -1, yval_tmp)# changed to have -1 val for prediction at splits
fr$yval <- yval_tmp
} else{
yval_tmp = as.numeric(fr$yval)
yval_tmp = ifelse(is.na(yval_tmp), -1, yval_tmp) # changed to have -1 val for prediction at splits
fr$yval <- yval_tmp
}
# Get predictor classes
if(rforest$model_type == 'randomForest'){
classes = attributes(rforest$terms)$dataClasses
} else if(rforest$model_type == 'ranger'){
classes = rforest$forest$covariate.levels
if(is.null(classes)){
# If the forest object does NOT have a 'covariate.levels' slot...
# It means there were no categorical variables and/or
# It means step_dummy was used to encode categorical variables
# We can safely assign all covarates as 'numeric'
classes = rep('numeric', length(rforest$forest$independent.variable.names))
} else{
# Otherwise, use the 'covariate.levels' slot to assign covariate classes
classes[!sapply(classes, is.null)]  = 'factor'
classes[sapply(classes, is.null)]  = 'numeric'
classes = unlist(classes)
}
} else{
stop('Model type not recognized')
}
# Identifiy categorical predictors
blah <- data.frame(var=fr$var, splits=as.character(gTree[,'split point']),
classes=unname(classes[fr$var]), stringsAsFactors=F)
index <- which(blah$classes=='factor' & !is.na(blah$classes))
blah$splits[index] <- sapply(blah$splits[index], factor.repr)
# Format splits
# Removed space after ':' ...
# This results in NAs in output
# Per 'tree' code, space is added in after factor levels are back referenced
splits <- cbind(
cutleft=paste0(ifelse(blah$classes=='factor' & !is.na(blah$classes),':','<'),
blah$splits),
cutright=paste0(ifelse(blah$classes=='factor' & !is.na(blah$classes),
':','>'),
blah$splits))
splits[fr$var=='<leaf>',] <- ""
# Convert tree data to data frame
fr <- as.data.frame(fr, stringsAsFactors=F)
# Add splits
fr$splits <- splits
x <- ifelse(fr$var=='<leaf>', bl[,3], gsub('.{1}$', '', bl[,1]))
if(nrow(gTree) == 1){x = c("1")} # If there is only one row, assign it row name = 1 so that it is designated as the root
# Get predictor classes
if(rforest$model_type == 'randomForest'){
fr$yprob = matrix(1/length(rforest$classes),nrow=nrow(fr), ncol=length(rforest$classes))
} else if(rforest$model_type == 'ranger'){
fr$yprob = matrix(1/length(rforest$forest$levels),nrow=nrow(fr), ncol=length(rforest$forest$levels))
} else{
stop('Model type not recognized')
}
row.names(fr) <- bit64::as.integer64(unlist(lapply(x, strtoi_2)))
fr <- fr[order(x),]
newtr <- list()
newtr$frame=fr
# Get number of levels for each predictor
if(rforest$model_type == 'randomForest'){
xlevels = rforest$forest$xlevels
}else if(rforest$model_type == 'ranger'){
xlevels = rforest$forest$covariate.levels
if(is.null(xlevels)){
# If the forest object does NOT have a 'covariate.levels' slot...
# It means there were no categorical variables and/or
# It means step_dummy was used to encode categorical variables
# We can safely assign all covariates as 0 levels
xlevels = as.list(rep(0, length(rforest$forest$independent.variable.names)))
names(xlevels) = rforest$forest$independent.variable.names
}else{
# Otherwise, convert NULL to zero in 'covariate.levels' list
xlevels[sapply(xlevels, is.null)]  = 0
}
}
# xlevels <- lapply(xlevels, length)
# Assign predictor variable levels
attr(newtr,'xlevels') <- xlevels
# Assign response variable levels, if necessary
if(rforest$response_type == 'classification'){
if(rforest$model_type == 'randomForest'){
attr(newtr,'ylevels') <- rforest$classes
} else if(rforest$model_type == 'ranger'){
attr(newtr,'ylevels') <- rforest$forest$levels
} else{
stop('Model type not recognized')
}
}
# Convert to tree
class(newtr) <- 'tree'
return(newtr)
}
