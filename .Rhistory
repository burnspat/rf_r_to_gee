getwd()
# SCRIPT METADATA ==========================================================================================
# Description: R script to read in ranger random forest model and format it for upload to Google Earth Engine
# Script Author: Kathleen Orndahl
# Script Date: 2023-05-03
# SET UP ====================================================================================================
library(dplyr)
library(tidyr)
library(ranger)
library(reprtree)
source('reprtree_ranger.R')
options(scipen=999) # Ensure numbers are not represented in scientific notatio
paste0(response_type, '_gee_short.txt')
# SCRIPT METADATA ==========================================================================================
# Description: R script to read in ranger random forest model and format it for upload to Google Earth Engine
# Script Author: Kathleen Orndahl
# Script Date: 2023-05-03
# SET UP ====================================================================================================
library(dplyr)
library(tidyr)
library(ranger)
library(reprtree)
source('reprtree_ranger.R')
options(scipen=999) # Ensure numbers are not represented in scientific notation
response_type = 'regression' # Choose 'classification' or 'regression'
shortened = FALSE # Use shortened format?
mod = readRDS(paste0('mod_', response_type, '.rds')) # Get model
data = read.csv(paste0('data_', response_type, '.csv')) # Get training data
paste0(response_type, '_gee_short.txt')
paste0(response_type, '_gee.txt')
i = 1``
i = 1
tree = treeInfo(mod, tree = i)
tree
response_type = 'classification' # Choose 'classification' or 'regression'
response_col = 'prediction' # Specify name of response variable
shortened = FALSE # Use shortened format?
mod = readRDS(paste0('mod_', response_type, '.rds')) # Get model
data = read.csv(paste0('data_', response_type, '.csv')) # Get training data
data
tree = treeInfo(mod, tree = i)
tree
tree_formatted = tree %>% mutate(prediction = !!pred.presence)
response_col = 'pred.presence' # Specify name of response variable
tree_formatted = tree %>% mutate(prediction = !!response_col)
tree_formatted
tree_formatted = tree %>% mutate(prediction = !!as.name(response_col))
tree_formatted
response_var = 'pred.presence' # Specify name of response variable
test = 'Sub.Arctic'
gsub(pattern = "[.]Arctic", replace = "Arctic", x = test)
gsub(pattern = "\\.[a-zA-Z]*", replace = "", x = test)
gsub(pattern = "(.)(?:[^0-9])", replace = "", x = test)
gsub(pattern = "/.(?!0)", replace = "", x = test)
gsub(pattern = "/.(?:[^1])", replace = "", x = test)
gsub(pattern = "(?<!A)./", replace = "", x = test)
gsub(pattern = "./", replace = "", x = test)
gsub(pattern = "[.]", replace = "", x = test)
gsub(pattern = "(?<=b)[.]", replace = "", x = test)
gsub(pattern = "[^0][.]", replace = "", x = test)
gsub(pattern = "[^b][.]", replace = "", x = test)
gsub(pattern = "[^0-9][.]", replace = "", x = test)
gsub(pattern = "[?:^0-9][.]", replace = "", x = test)
gsub(pattern = "[?:^\d][.]", replace = "", x = test)
gsub(pattern = "[?:^[0-9]][.]", replace = "", x = test)
gsub(pattern = "[^[0-9]][.]", replace = "", x = test)
gsub(pattern = "[^\d][.]", replace = "", x = test)
gsub(pattern = "[^\\d][.]", replace = "", x = test)
gsub(pattern = "[?:^\\d][.]", replace = "", x = test)
gsub(pattern = "(?:[^\\d])[.]", replace = "", x = test)
gsub(pattern = "[.](?:[^\\d])", replace = "", x = test)
gsub(pattern = "\\.(?![0-9])", replace = "", x = test)
gsub(pattern = "\\.(?!\\d)", replace = "", x = test)
gsub(pattern = "\\.(?![0-9])", replace = "", x = test, perl=TRUE)
test = 'Sub.9rctic'
gsub(pattern = "\\.(?![0-9])", replace = "", x = test, perl=TRUE)
test = 'Sub.$rctic'
gsub(pattern = "\\.(?![0-9])", replace = "", x = test, perl=TRUE)
test = 'Sub.Arctic'
gsub(pattern = "\\.(?![0-9])", replace = "", x = test, perl=TRUE)
getwd()
# SCRIPT METADATA ==========================================================================================
# Description: R script to read in ranger random forest model and format it for upload to Google Earth Engine
# Script Author: Kathleen Orndahl
# Script Date: 2023-05-03
# SET UP ====================================================================================================
library(dplyr)
library(tidyr)
library(ranger)
library(reprtree)
source('reprtree_ranger.R')
options(scipen=999) # Ensure numbers are not represented in scientific notation
response_type = 'classification' # Choose 'classification' or 'regression'
response_var = 'pred.presence' # Specify name of response variable
shortened = FALSE # Use shortened format?
mod = readRDS(paste0('mod_', response_type, '.rds')) # Get model
data = read.csv(paste0('data_', response_type, '.csv')) # Get training data
# Set output file name
if(shortened){
tree_file = paste0(response_type, '_gee_short.txt')
}else{
tree_file = paste0(response_type, '_gee.txt')
}
# Create output file
file.create(tree_file)
# LOOP TREES ====================================================================================================
# Format binary as regression trees
# Tidymodels set_mode('classification') sets probability = TRUE for ranger random forest
# i.e. it produces a probability forest
# https://parsnip.tidymodels.org/reference/details_rand_forest_ranger.html
# https://stackoverflow.com/questions/62806074/how-to-get-the-same-prediction-probability-and-class-in-a-random-forest
for(i in 1:mod$num.trees){
# Get tree
tree = treeInfo(mod, tree = i)
# FORMAT TREE ====================================================================================================
tree_formatted = tree %>% mutate(prediction = !!as.name(response_var)) # Rename response variable
tree_formatted = tree_formatted %>% select(-c('nodeID', 'splitvarID')) # Remove unnecessary columns
tree_formatted$leftChild = tree_formatted$leftChild+1 # Fix child indexing
tree_formatted$rightChild = tree_formatted$rightChild+1 # Fix child indexing
tree_formatted = tree_formatted %>% mutate(terminal = if_else(terminal, -1, 1)) # Convert from TRUE/FALSE to -1/1
tree_formatted = tree_formatted %>% mutate(leftChild = if_else(is.na(leftChild), 0, leftChild)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% mutate(rightChild = if_else(is.na(rightChild), 0, rightChild)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% mutate(splitval = if_else(is.na(splitval), 0, splitval)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% mutate(splitStat = if_else(is.na(splitStat), 0, splitStat)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% rename('left daughter' = 'leftChild', 'right daughter' = 'rightChild', 'split var' = 'splitvarName', 'split point' = 'splitval', 'status' = 'terminal') # Rename columns
# CONVERT TREE ====================================================================================================
if(shortened){
tree_final = as.tree.ranger.short(gTree = tree_formatted,
rforest = mod,
training_data = data,
response_type = 'regression')
}else{
tree_final = as.tree.ranger(gTree = tree_formatted,
rforest = mod,
training_data = data,
response_type = 'regression')
}
# WRITE TREE ====================================================================================================
sink(tree_file, append = TRUE)
print(tree_final)
sink(append = TRUE)
# Report progress
print(paste0('Tree ', i, ' of ', mod$num.trees, ' completed'))
}
# TIDY FOREST ====================================================================================================
tree_file_headers = readLines(tree_file)
tree_file_headers  = gsub(pattern = "node\\), split, n, deviance, yval", replace = "", x = tree_file_headers) # Remove header
tree_file_headers  = gsub(pattern = "      \\* denotes terminal node", replace = "", x = tree_file_headers) # Remove header
tree_file_headers  = gsub(pattern = "\\.(?![0-9])", replace = "", x = tree_file_headers, perl=TRUE) # Periods cannot be read by GEE, remove periods if not followed by a number
tree_file_headers = tree_file_headers[which(tree_file_headers!="")] # Remove blank lines
# Save
if(shortened){
writeLines(tree_file_headers, con = paste0(response_type, '_formatted_gee_short.txt'))
}else{
writeLines(tree_file_headers, con = paste0(response_type, '_formatted_gee.txt'))
}
# SCRIPT METADATA ==========================================================================================
# Description: R script to read in ranger random forest model and format it for upload to Google Earth Engine
# Script Author: Kathleen Orndahl
# Script Date: 2023-05-03
# SET UP ====================================================================================================
library(dplyr)
library(tidyr)
library(ranger)
library(reprtree)
source('reprtree_ranger.R')
options(scipen=999) # Ensure numbers are not represented in scientific notation
response_type = 'regression' # Choose 'classification' or 'regression'
response_var = 'prediction' # Specify name of response variable - for example dataset choose 'pred.presence' for classification and 'prediction' for regression
shortened = FALSE # Use shortened format?
mod = readRDS(paste0('mod_', response_type, '.rds')) # Get model
data = read.csv(paste0('data_', response_type, '.csv')) # Get training data
# Set output file name
if(shortened){
tree_file = paste0(response_type, '_gee_short.txt')
}else{
tree_file = paste0(response_type, '_gee.txt')
}
# Create output file
file.create(tree_file)
# LOOP TREES ====================================================================================================
# Format binary as regression trees
# Tidymodels set_mode('classification') sets probability = TRUE for ranger random forest
# i.e. it produces a probability forest
# https://parsnip.tidymodels.org/reference/details_rand_forest_ranger.html
# https://stackoverflow.com/questions/62806074/how-to-get-the-same-prediction-probability-and-class-in-a-random-forest
for(i in 1:mod$num.trees){
# Get tree
tree = treeInfo(mod, tree = i)
# FORMAT TREE ====================================================================================================
tree_formatted = tree %>% mutate(prediction = !!as.name(response_var)) # Rename response variable
tree_formatted = tree_formatted %>% select(-c('nodeID', 'splitvarID')) # Remove unnecessary columns
tree_formatted$leftChild = tree_formatted$leftChild+1 # Fix child indexing
tree_formatted$rightChild = tree_formatted$rightChild+1 # Fix child indexing
tree_formatted = tree_formatted %>% mutate(terminal = if_else(terminal, -1, 1)) # Convert from TRUE/FALSE to -1/1
tree_formatted = tree_formatted %>% mutate(leftChild = if_else(is.na(leftChild), 0, leftChild)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% mutate(rightChild = if_else(is.na(rightChild), 0, rightChild)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% mutate(splitval = if_else(is.na(splitval), 0, splitval)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% mutate(splitStat = if_else(is.na(splitStat), 0, splitStat)) # Convert NAs to zeros
tree_formatted = tree_formatted %>% rename('left daughter' = 'leftChild', 'right daughter' = 'rightChild', 'split var' = 'splitvarName', 'split point' = 'splitval', 'status' = 'terminal') # Rename columns
# CONVERT TREE ====================================================================================================
if(shortened){
tree_final = as.tree.ranger.short(gTree = tree_formatted,
rforest = mod,
training_data = data,
response_type = 'regression')
}else{
tree_final = as.tree.ranger(gTree = tree_formatted,
rforest = mod,
training_data = data,
response_type = 'regression')
}
# WRITE TREE ====================================================================================================
sink(tree_file, append = TRUE)
print(tree_final)
sink(append = TRUE)
# Report progress
print(paste0('Tree ', i, ' of ', mod$num.trees, ' completed'))
}
# TIDY FOREST ====================================================================================================
tree_file_headers = readLines(tree_file)
tree_file_headers  = gsub(pattern = "node\\), split, n, deviance, yval", replace = "", x = tree_file_headers) # Remove header
tree_file_headers  = gsub(pattern = "      \\* denotes terminal node", replace = "", x = tree_file_headers) # Remove header
tree_file_headers  = gsub(pattern = "\\.(?![0-9])", replace = "", x = tree_file_headers, perl=TRUE) # Periods cannot be read by GEE, remove periods if not followed by a number
tree_file_headers = tree_file_headers[which(tree_file_headers!="")] # Remove blank lines
# Save
if(shortened){
writeLines(tree_file_headers, con = paste0(response_type, '_formatted_gee_short.txt'))
}else{
writeLines(tree_file_headers, con = paste0(response_type, '_formatted_gee.txt'))
}
